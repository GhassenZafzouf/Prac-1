%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Prac 1 - 4.2.2 Synchroniser based on Correlator (Frequency B)        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Signal A: Signal detection (Energy detection) + QPSK Symbols
clear all;
close all;
data = read_complex_byte('freqB.bin'); % Read data (Signal A)
Fs = 2e6;                              % Sampling rate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
t = [0:1/Fs:(length(real(data))-1)/Fs];   % Time vector (pre-recorded)
% for i = 9300: 10 : 9400                 % Loop to determine the frequency shift of the received signal
%     trial_signal = data .* exp(1j*2*pi*i*t');
%     figure, plot(trial_signal)
%     str = sprintf('Plot Signal A.1 with frequency shift= %f',i);
%     title(str);
% end 
% frequency shift turned out to be 9320 Hz

frequency_shift = 9320;
fr_shift_data = data .* exp(1j*2*pi*frequency_shift*t');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Time shift (Time synchronization) - Correlator
% Oversample each bit
bit_0 = [0 0 0 0 0 0 0 0];
bit_1 = [1 1 1 1 1 1 1 1];
% Create Preamble
preamble = [bit_1 bit_1 bit_1 bit_1 bit_0 bit_0 bit_1 bit_1 bit_1 bit_0 ...
            bit_1 bit_0 bit_0 bit_0 bit_0 bit_0];
[v_mod,tx] = BPSK_mod(preamble,8,0);   % BPSK Modulation of the preamble

sequence = conv(fr_shift_data,v_mod);  % Convolution of freq. shifted signal with preamble  
figure, plot(abs(sequence))
title('Absolute value of the result of convolution')

energy = abs(sequence);    % Root of the energy of the signal
threshold  = 38;           % This threshold was determined manually 
signal = []; 

% This loop aims to find the time of start of the signal (640-QPSK bits)
 for i = 1:1:length(sequence)
    if (energy(i) >  threshold)
         t_synch = i - 128 +1 ;
         signal = [signal fr_shift_data(t_synch:t_synch+640-1)];
     end 
  end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Integrate and dump + Demodulation
sentence = [];
  for word  = 1:1:size(signal,2)   % "signal" is a matrix : each column represents a word
    IQ = intdump(transpose(signal(:,word)),16);
    v_demod = pskdemod(IQ,4,pi/4);
    
    binary_vector = [];
    for index = 1:1:length(v_demod)     % Convert QPSK symbols into bits
        if v_demod(index) == 0
            binary_vector = [binary_vector 0 0];
        elseif v_demod(index) == 1
             binary_vector = [binary_vector 0 1];
        elseif v_demod(index) == 2
             binary_vector = [binary_vector 1 0];
        elseif v_demod(index) == 3
             binary_vector = [binary_vector 1 1];
        end 
    end

    message  =[];
    for i = 1:8:length(binary_vector)-8    % Decode Signal
        bit_vec = binary_vector(i+7:-1:i); % Most Significant Bit
        message = [message char(bi2de(bit_vec))]; % Each word
    end
    sentence = [sentence message];  % The whole "sentence" / message
end

